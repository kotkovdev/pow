// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kotkovdev/pow/internal/server (interfaces: QuotesService,Challenger)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	challenger "github.com/kotkovdev/pow/pkg/challenger"
)

// MockQuotesService is a mock of QuotesService interface.
type MockQuotesService struct {
	ctrl     *gomock.Controller
	recorder *MockQuotesServiceMockRecorder
}

// MockQuotesServiceMockRecorder is the mock recorder for MockQuotesService.
type MockQuotesServiceMockRecorder struct {
	mock *MockQuotesService
}

// NewMockQuotesService creates a new mock instance.
func NewMockQuotesService(ctrl *gomock.Controller) *MockQuotesService {
	mock := &MockQuotesService{ctrl: ctrl}
	mock.recorder = &MockQuotesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotesService) EXPECT() *MockQuotesServiceMockRecorder {
	return m.recorder
}

// GetRandomQuote mocks base method.
func (m *MockQuotesService) GetRandomQuote() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockQuotesServiceMockRecorder) GetRandomQuote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockQuotesService)(nil).GetRandomQuote))
}

// MockChallenger is a mock of Challenger interface.
type MockChallenger struct {
	ctrl     *gomock.Controller
	recorder *MockChallengerMockRecorder
}

// MockChallengerMockRecorder is the mock recorder for MockChallenger.
type MockChallengerMockRecorder struct {
	mock *MockChallenger
}

// NewMockChallenger creates a new mock instance.
func NewMockChallenger(ctrl *gomock.Controller) *MockChallenger {
	mock := &MockChallenger{ctrl: ctrl}
	mock.recorder = &MockChallengerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChallenger) EXPECT() *MockChallengerMockRecorder {
	return m.recorder
}

// CreatePuzzle mocks base method.
func (m *MockChallenger) CreatePuzzle(arg0 []byte, arg1 time.Time, arg2 int) (*challenger.Puzzle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePuzzle", arg0, arg1, arg2)
	ret0, _ := ret[0].(*challenger.Puzzle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePuzzle indicates an expected call of CreatePuzzle.
func (mr *MockChallengerMockRecorder) CreatePuzzle(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePuzzle", reflect.TypeOf((*MockChallenger)(nil).CreatePuzzle), arg0, arg1, arg2)
}

// SolveRecursive mocks base method.
func (m *MockChallenger) SolveRecursive(arg0, arg1 []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SolveRecursive", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// SolveRecursive indicates an expected call of SolveRecursive.
func (mr *MockChallengerMockRecorder) SolveRecursive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SolveRecursive", reflect.TypeOf((*MockChallenger)(nil).SolveRecursive), arg0, arg1)
}
